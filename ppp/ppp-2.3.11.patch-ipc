diff -u --new-file --recursive ppp-2.3.11.orig/chat/chat.c ppp-2.3.11/chat/chat.c
--- ppp-2.3.11.orig/chat/chat.c	Sun Feb 15 12:21:28 2004
+++ ppp-2.3.11/chat/chat.c	Sun Feb 15 11:56:45 2004
@@ -14,6 +14,10 @@
  *	This software is in the public domain.
  *
  * -----------------
+ *	15-Oct-2003 added Unix message queues support.
+ *	Rearrange #include's in BSD style.
+ *	Sergey Tursanov <gsr@smtp.ru>.
+ *
  *	22-May-99 added environment substitutuion, enabled with -E switch.
  *	Andreas Arens <andras@cityweb.de>.
  *
@@ -90,18 +94,20 @@
 static const char rcsid[] = "$Id: chat.c,v 1.26 1999/12/23 01:39:54 paulus Exp $";
 #endif
 
-#include <stdio.h>
+#include <sys/ipc.h>
+#include <sys/msg.h>
+#include <sys/stat.h>
+#include <sys/types.h>
 #include <ctype.h>
-#include <time.h>
+#include <errno.h>
 #include <fcntl.h>
+#include <stdio.h>
 #include <signal.h>
-#include <errno.h>
-#include <string.h>
 #include <stdlib.h>
-#include <unistd.h>
-#include <sys/types.h>
-#include <sys/stat.h>
+#include <string.h>
 #include <syslog.h>
+#include <time.h>
+#include <unistd.h>
 
 #ifndef TERMIO
 #undef	TERMIOS
@@ -179,6 +185,7 @@
 char *chat_file   = (char *) 0;
 char *phone_num   = (char *) 0;
 char *phone_num2  = (char *) 0;
+key_t ipc_key     = -1;
 int timeout       = DEFAULT_CHAT_TIMEOUT;
 
 int have_tty_parameters = 0;
@@ -348,6 +355,13 @@
 		usage();
 	    break;
 
+	case 'm':
+		if ((arg = OPTARG(argc, argv)) != NULL)
+			ipc_key = ftok(arg, 0);
+		else
+			usage();
+		break;
+
 	default:
 	    usage();
 	    break;
@@ -470,7 +484,8 @@
 {
     fprintf(stderr, "\
 Usage: %s [-e] [-E] [-v] [-V] [-t timeout] [-r report-file]\n\
-     [-T phone-number] [-U phone-number2] {-f chat-file | chat-script}\n", program_name);
+     [-T phone-number] [-U phone-number2] {-f chat-file | chat-script}\n\
+     -m msq-file\n", program_name);
     exit(1);
 }
 
@@ -1001,6 +1016,28 @@
     return (string);
 }
 
+/* Send IPC msg using ipc_key */
+#define PPP_MSG_TYPE	1000
+#define IPC_MSG_SIZE	256
+void chat_send_ipc(char *s)
+{
+	char buf[IPC_MSG_SIZE + sizeof(long)];
+	struct msgbuf *mb = (struct msgbuf *)buf;
+	int qid, l;
+	if ((s == NULL) || (ipc_key == -1))
+		return;
+	qid = msgget(ipc_key, S_IWRITE);
+	if (qid == -1)
+		return;
+	mb->mtype = PPP_MSG_TYPE;
+	l = strlen(s);
+	if (l >= IPC_MSG_SIZE)
+		l = IPC_MSG_SIZE - 1;
+	strncpy(mb->mtext, s, l);
+	mb->mtext[l] = 0;
+	msgsnd(qid, mb, l + 1, IPC_NOWAIT);
+}
+
 /*
  *  process the reply string
  */
@@ -1012,6 +1049,8 @@
     if (say_next) {
 	say_next = 0;
 	s = clean(s, 1);
+	if (ipc_key != -1)
+		chat_send_ipc(s);
 	write(2, s, strlen(s));
         free(s);
 	return;
diff -u --new-file --recursive ppp-2.3.11.orig/pppd/ipcp.c ppp-2.3.11/pppd/ipcp.c
--- ppp-2.3.11.orig/pppd/ipcp.c	Sun Feb 15 12:22:06 2004
+++ ppp-2.3.11/pppd/ipcp.c	Sun Feb 15 12:04:44 2004
@@ -23,14 +23,17 @@
  * TODO:
  */
 
-#include <stdio.h>
-#include <string.h>
-#include <netdb.h>
+#include <arpa/inet.h>
+#include <netinet/in.h>
+#include <sys/ipc.h>
+#include <sys/msg.h>
 #include <sys/param.h>
-#include <sys/types.h>
 #include <sys/socket.h>
-#include <netinet/in.h>
-#include <arpa/inet.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <netdb.h>
+#include <stdio.h>
+#include <string.h>
 
 #include "pppd.h"
 #include "fsm.h"
@@ -53,6 +56,9 @@
 /* Hook for a plugin to know when IP protocol has come down */
 void (*ip_down_hook) __P((void)) = NULL;
 
+/* pathname for ftok to obtain IPC key */
+char *ipc_pathname = NULL;
+
 /* local vars */
 static int default_route_set[NUM_PPP];	/* Have set up a default route */
 static int proxy_arp_set[NUM_PPP];	/* Have created proxy arp entry */
@@ -1627,7 +1633,6 @@
     np_finished(f->unit, PPP_IP);
 }
 
-
 /*
  * ipcp_script_done - called when the ip-up or ip-down script
  * has finished.
@@ -1654,6 +1659,30 @@
 }
 
 /*
+ * ipcp_ipc - send IPC message instead of running ip-up/ip-down.
+ */
+#define IPCP_MSG_TYPE	2000
+#define IPC_MSG_SIZE	256
+static void ipcp_ipc(char *script)
+{
+	char buf[IPC_MSG_SIZE + sizeof(long)];
+	struct msgbuf *mb = (struct msgbuf *)buf;
+	int qid, l;
+	if ((script == NULL) || (ipc_pathname == NULL))
+		return;
+	qid = msgget(ftok(ipc_pathname, 0), S_IWRITE);
+	if (qid == -1)
+		return;
+	mb->mtype = IPCP_MSG_TYPE;
+	l = strlen(script);
+	if (l >= IPC_MSG_SIZE)
+		l = IPC_MSG_SIZE - 1;
+	strncpy(mb->mtext, script, l);
+	mb->mtext[l] = 0;
+	msgsnd(qid, mb, l + 1, IPC_NOWAIT);
+}
+
+/*
  * ipcp_script - Execute a script with arguments
  * interface-name tty-name speed local-IP remote-IP.
  */
@@ -1664,6 +1693,10 @@
     char strspeed[32], strlocal[32], strremote[32];
     char *argv[8];
 
+    if (ipc_pathname != NULL){
+	    ipcp_ipc(script);
+	    return;
+    }
     slprintf(strspeed, sizeof(strspeed), "%d", baud_rate);
     slprintf(strlocal, sizeof(strlocal), "%I", ipcp_gotoptions[0].ouraddr);
     slprintf(strremote, sizeof(strremote), "%I", ipcp_hisoptions[0].hisaddr);
diff -u --new-file --recursive ppp-2.3.11.orig/pppd/ipcp.h ppp-2.3.11/pppd/ipcp.h
--- ppp-2.3.11.orig/pppd/ipcp.h	Sun Feb 15 12:23:16 2004
+++ ppp-2.3.11/pppd/ipcp.h	Sun Feb 15 11:27:36 2004
@@ -77,3 +77,4 @@
 /******************************************/
 
 extern struct protent ipcp_protent;
+extern char *ipc_pathname;
diff -u --new-file --recursive ppp-2.3.11.orig/pppd/options.c ppp-2.3.11/pppd/options.c
--- ppp-2.3.11.orig/pppd/options.c	Sun Feb 15 12:22:44 2004
+++ ppp-2.3.11/pppd/options.c	Sun Feb 15 11:25:16 2004
@@ -283,6 +283,8 @@
     { "active-filter", 1, setactivefilter,
       "set filter for active pkts" },
 #endif
+    { "use-ipc", o_string, &ipc_pathname,
+      "Use IPC instead of ip-up/ip-down scripts" },
 
     { NULL }
 };
